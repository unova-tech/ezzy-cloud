/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Audio, BamlCtxManager, BamlRuntime, ClientRegistry, FunctionLog,FunctionResult, 
HTTPRequest, Image, Pdf, Video } from "@boundaryml/baml"
import {
  BamlAbortError,
  BamlStream,
  Collector,
  toBamlError
} from "@boundaryml/baml"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request"
import type * as events from "./events"
import {
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX,
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
} from "./globals"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import type { partial_types } from "./partial_types"
import type TypeBuilder from "./type_builder"
import type * as types from "./types"
import type {
  Check,
  Checked,
  RecursivePartialNull as MovedRecursivePartialNull,
  TextElement,
  ViewElement,
  Wireframe,
  Wireframes
} from "./types"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

type TickReason = "Unknown"

type BamlCallOptions<EventsT = never> = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
  env?: Record<string, string | undefined>
  tags?: Record<string, string>
  signal?: AbortSignal
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
  events?: EventsT
}

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private streamClient: BamlStreamClient
  private httpRequest: AsyncHttpRequest
  private httpStreamRequest: AsyncHttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(
    runtime: BamlRuntime,
    ctxManager: BamlCtxManager,
    bamlOptions?: BamlCallOptions
  ) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
    this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  get stream() {
    return this.streamClient
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  async GenerateWireframes(
    resume: string,
    __baml_options__?: BamlCallOptions<never>
  ): Promise<types.Wireframes> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal

      if (signal?.aborted) {
        throw new BamlAbortError("Operation was aborted", signal.reason)
      }

      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.GenerateWireframes(resume, __baml_options__)

        return await stream.getFinalResponse()
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : []
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env }
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string
        ][]
      )
      const raw = await this.runtime.callFunction(
        "GenerateWireframes",
        {
          resume: resume
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        options.events
      )
      return raw.parsed(false) as types.Wireframes
    } catch (error) {
      throw toBamlError(error)
    }
  }
}

class BamlStreamClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private bamlOptions: BamlCallOptions

  constructor(
    runtime: BamlRuntime,
    ctxManager: BamlCtxManager,
    bamlOptions?: BamlCallOptions
  ) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.bamlOptions = bamlOptions || {}
  }

  GenerateWireframes(
    resume: string,
    __baml_options__?: BamlCallOptions<never>
  ): BamlStream<partial_types.Wireframes, types.Wireframes> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.signal

      if (signal?.aborted) {
        throw new BamlAbortError("Operation was aborted", signal.reason)
      }

      let collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : []

      let onTickWrapper: (() => void) | undefined

      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector")
        collector = [...collector, tickCollector]

        onTickWrapper = () => {
          const log = tickCollector.last
          if (log) {
            try {
              options.onTick!("Unknown", log)
            } catch (error) {
              console.error(
                "Error in onTick callback for GenerateWireframes",
                error
              )
            }
          }
        }
      }

      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env }
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string
        ][]
      )
      const raw = this.runtime.streamFunction(
        "GenerateWireframes",
        {
          resume: resume
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        options.tags || {},
        env,
        signal,
        onTickWrapper
      )
      return new BamlStream<partial_types.Wireframes, types.Wireframes>(
        raw,
        (a): partial_types.Wireframes => a,
        (a): types.Wireframes => a,
        this.ctxManager.cloneContext(),
        options.signal
      )
    } catch (error) {
      throw toBamlError(error)
    }
  }
}

export const b = new BamlAsyncClient(
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX
)
