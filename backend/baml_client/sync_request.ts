/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Audio, BamlCtxManager, BamlRuntime, ClientRegistry, Image, Pdf, Video } from "@boundaryml/baml"
import { type HTTPRequest, toBamlError } from "@boundaryml/baml"
import type * as events from "./events"
import type TypeBuilder from "./type_builder"
import type * as types from "./types"
import type {
  Check,
  Checked,
  TextElement,
  ViewElement,
  Wireframe,
  Wireframes
} from "./types"

type BamlCallOptions<EventsT = never> = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  env?: Record<string, string | undefined>
  events?: EventsT
}

export class HttpRequest {
  constructor(
    private runtime: BamlRuntime,
    private ctxManager: BamlCtxManager
  ) {}

  GenerateWireframes(
    resume: string,
    __baml_options__?: BamlCallOptions<never>
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env }
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string
        ][]
      )
      return this.runtime.buildRequestSync(
        "GenerateWireframes",
        {
          resume: resume
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error)
    }
  }
}

export class HttpStreamRequest {
  constructor(
    private runtime: BamlRuntime,
    private ctxManager: BamlCtxManager
  ) {}

  GenerateWireframes(
    resume: string,
    __baml_options__?: BamlCallOptions<never>
  ): HTTPRequest {
    try {
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env }
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string
        ][]
      )
      return this.runtime.buildRequestSync(
        "GenerateWireframes",
        {
          resume: resume
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error)
    }
  }
}
